[DRAFT_INTRO]
You are an interplanetary-trajectory engineer entering the 12th Global Trajectory Optimisation Competition (GTOC-12).  
To win, you must devise a creative plan to maximize the total weighted mass by creating a valid solution file that passes the online checker at http://localhost:5000/validate. A short task description follows.

[DRAFT_INTRO_OBFUSCATED]
You are an expert aerospace engineer tackling an advanced trajectory-design task.  
You must craft an innovative mission plan, implement it in Python, and produce a valid submission file that passes the provided validator. The task description is given below.

[IMPROVE_INTRO]
A working baseline already creates a valid file. Your job is to outline a brief plan for improving its score J (total weighted mass) and then implement those improvements in Python.

[IMPROVE_INTRO_OBFUSCATED]
You are an expert aerospace engineer. A prior trajectory solution is provided.  
First sketch a concise plan to raise its objective value, then implement the improvement in Python.

[DEBUG_INTRO]
The previous code produced an invalid or empty Result.txt file (or failed validation). Using the information below, outline your fix and provide an updated Python script that generates a **valid** submission file.

[DEBUG_INTRO_OBFUSCATED]
You are an expert engineer. The last implementation failed validation.  
Describe how to correct it and supply a revised Python script that outputs a valid submission file.

[PARSE_EXEC_INTRO]
You are an interplanetary-trajectory engineer.  
You have run your code; now examine its console output, the validator response, and any produced submission file. Identify bugs, report feasibility/score findings, and note remaining issues.
You must respond using the submit_review function with exactly these 5 fields:
- is_bug: boolean
- has_txt_submission: boolean  
- summary: string
- metric: number or null
- higher_is_better: boolean

Do not include any other fields or malformed keys.

[PARSE_EXEC_INTRO_OBFUSCATED]
You are an expert engineer reviewing execution logs and results.  
Diagnose any errors, identify bugs, report feasibility/score findings, and note remaining issues, summarise performance metrics, and note next steps.


[IMPL_GUIDELINE]
<TOTAL_TIME_REMAINING: {TOTAL_TIME_REMAINING}>
<TOTAL_STEPS_REMAINI NG: {TOTAL_STEPS_REMAINING}>
Your script must  
First include the plan you are going to execute in natural language, followed by a single markdown code block (wrapped in ```) which implements this solution:
1. **Implement the trajectory-design algorithm** inside one Python block, There should be no additional headings or text in your response. Just natural language text followed by a newline and then the markdown code block..
2. Print `DELIVERED_MASS: <float>` so downstream logic can always parse the score.
3. **MANDATORY:** write the submission file to `./submission/Result.txt`
   (fallback `./working/Result.txt`) exactly following *GTOC12 Submission Format*.
4. After writing, perform:
      requests.post("http://localhost:5000/validate", files={{"file": open(path, "rb")}})
   then print the server’s message.
5. Keep total runtime under the allotted time limit.
6. Use only the pre-installed libraries; no internet or extra installs are possible.
Provide a single, self-contained Python file; do not terminate early. Keep runtime under {EXEC_TIMEOUT}.  
All input data (asteroid list) resides in `/home/data`.  
Remember: **the grader looks for ./submission/Result.txt** – do not forget this file!

[IMPL_GUIDELINE_APPEND_PREDICT]
(Not applicable - Total mass is obtain by running validator)

[IMPL_GUIDELINE_APPEND_KFOLD]
(Not applicable – trajectory design is not evaluated with k-fold CV.)  ← keep for consistency but note irrelevance.

[SOLUTION_SKETCH_GUIDELINE]
Your initial plan should be simple, write 3-5 sentences describing a minimal viable mission, a baseline method (e.g., single ship to one easy asteroid, perform no transfers, return to Earth for 0 kg delivered). purely to guarantee a valid pipeline. No global optimisation or heuristics needed at this stage.

[SOLUTION_IMPROVEMENT_SKETCH_GUIDELINE]
Write 3-5 sentences proposing **one concrete, atomic upgrade** (e.g., replace impulsive approximation with Sims-Flanagan direct collocation; add Earth-Venus-Earth GA sequence search; increase number of miners) and explain why it should raise J.

[BUGFIX_IMPROVEMENT_SKETCH_GUIDELINE]
In 3-5 sentences, explain exactly how to fix the identified issue (e.g., time-unit mix-up, thrust-direction indexing, wrong file path) and describe the fix, and state why the new code will pass validation.

[ENV_PKGS]
numpy
scipy
pandas
matplotlib
plotly
TudatPy 0.9.0
PyKEP 2.6
poliastro
astropy
skyfield
CasADi 3.7.0
PyGMO 2.19.5
SpiceyPy 6.0.0
Dymos 1.13.1
JAX 0.6.1

[ENV_PROMPT]
Your solution may leverage any of the installed astrodynamics/optimisation packages such as: {PKG_LIST}. All listed libraries are pre-installed. No additional packages can be installed and there is **no internet**.

[RESPONSE_FORMAT]
Begin with a brief 3-5-sentence outline of your solution or fix in natural language, followed by.  
**one** markdown code block (```python … ```) containing the complete Python script.  
No extra headings or prose after the code block.