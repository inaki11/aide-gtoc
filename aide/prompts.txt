[DRAFT_INTRO]
You are an expert spacecraft mission designer + numerical optimizer + software engineer. Your job is to **produce a full, non-naive initial solution generation pipeline for GTOC-12**. 


[DRAFT_INTRO_OBFUSCATED]
You are an expert aerospace engineer tackling an advanced trajectory-design task.  
You must craft an innovative mission plan, implement it in Python, and produce a valid submission file that passes the provided validator. The task description is given below.

[IMPROVE_INTRO]
A working baseline already creates a valid file. Your job is to outline a brief plan for improving its score J (total weighted mass) and then implement those improvements in Python.

[IMPROVE_INTRO_OBFUSCATED]
You are an expert aerospace engineer. A prior trajectory solution is provided.  
First sketch a concise plan to raise its objective value, then implement the improvement in Python.

[DEBUG_INTRO]
The previous code produced an invalid or empty Result.txt file (or failed validation). Using the information below, outline your fix and provide an updated Python script that generates a **valid** submission file.

[DEBUG_INTRO_OBFUSCATED]
You are an expert engineer. The last implementation failed validation.  
Describe how to correct it and supply a revised Python script that outputs a valid submission file.

[PARSE_EXEC_INTRO]
You are an interplanetary-trajectory engineer.  
You have run your code; now examine its console output, the validator response, and any produced submission file. Identify bugs, report feasibility/score findings, and note remaining issues.
You must respond using the submit_review function with exactly these 5 fields:
- is_bug: boolean
- has_txt_submission: boolean  
- summary: string
- metric: number or null
- higher_is_better: boolean

Do not include any other fields or malformed keys.

[PARSE_EXEC_INTRO_OBFUSCATED]
You are an expert engineer reviewing execution logs and results.  
Diagnose any errors, identify bugs, report feasibility/score findings, and note remaining issues, summarise performance metrics, and note next steps.


[IMPL_GUIDELINE]
<TOTAL_TIME_REMAINING: {TOTAL_TIME_REMAINING}>
<TOTAL_STEPS_REMAINI NG: {TOTAL_STEPS_REMAINING}>

Your script must be contained on a single markdown code block (wrapped in ```) which implements the solution:
1. **Implement the trajectory-design algorithm** inside one Python block, There should be no additional headings or text in your response. Just natural language text followed by a newline and then the markdown code block.
2. **MANDATORY:** write the submission file to `./submission/Result.txt`
   (fallback `./working/Result.txt`) exactly following *GTOC12 Submission Format*.
3. After writing, perform:
      requests.post("http://localhost:5000/validate", files={{"file": open(path, "rb")}})
   then print the server’s message.
4. Keep total runtime under the allotted time limit.
 All input data (asteroid list) resides in `/home/data`.  
Remember: **the grader looks for ./submission/Result.txt** – do not forget this file!

[IMPL_GUIDELINE_APPEND_PREDICT]


[IMPL_GUIDELINE_APPEND_KFOLD]

[SOLUTION_SKETCH_GUIDELINE]
Focus on deep thinking: first decompose the problem into subproblems, then design the program architecture focusing only on the structure of the program and the functions. Remind that all the code must be in a unique python script. 
Required outputs (explicitly, in this order):
1. **Solution Sketch** — an enumerated decomposition of the problem into 8–15 atomic subproblems (each 3-5 sentences), and a 1–2 paragraph overall strategy explaining why the chosen pipeline balances speed and optimality. Think deeply about the plan since it is the key for success.
2. **Algorithmic Approach** — for each subproblem, propose 1–2 concrete algorithmic choices (cheap baseline + a higher-fidelity method). For each subproblem give 1 cheap baseline method and 1 higher-fidelity method (e.g., Lambert + Edelbaum baseline; Sims-Flanagan or direct collocation refinement). For each method list expected computational cost (big-O or rough runtime scaling), known failure modes, and suggested default hyperparameters.
3. **code structure** — Think deeply in natural language about the functions the program will need to solve the problem.
4. **Python code block** -- Here you have to implement the plan. First you should copy all the variables and formulas given that you will need. Then code the funcions properly documented, and finally the rest of code.
Finally include test code for every step of the code, using as a tiny sample dataset the first 50 asteroids from 'GTOC12_Asteroids_Data.txt' file.
To win, you must devise a creative plan to maximize the total weighted mass by creating a valid solution file named Result.txt, this file must follow the submission format, pay attention to it since is quite challenging.
A short task description follows.

[SOLUTION_IMPROVEMENT_SKETCH_GUIDELINE]
Write 3-5 sentences proposing **one concrete, atomic upgrade** (e.g., replace impulsive approximation with Sims-Flanagan direct collocation; add Earth-Venus-Earth GA sequence search; increase number of miners) and explain why it should raise J.

[BUGFIX_IMPROVEMENT_SKETCH_GUIDELINE]
In 3-5 sentences, explain exactly how to fix the identified issue (e.g., time-unit mix-up, thrust-direction indexing, wrong file path) and describe the fix, and state why the new code will pass validation.

[ENV_PKGS]
numpy
scipy
pandas
matplotlib
plotly
TudatPy
PyKEP
poliastro
astropy
skyfield
CasADi
PyGMO
SpiceyPy
Dymos
JAX

[ENV_PROMPT]
Your solution may leverage any of the installed astrodynamics/optimisation packages such as: {PKG_LIST}. All listed libraries are pre-installed. No additional packages can be installed and there is **no internet**.

[RESPONSE_FORMAT]
Begin with a deep explanation of your solution in natural language, followed by.  
**one** markdown code block (```python … ```) containing the complete Python script.
The Python code must not use an if __name__ == "__main__": block; it should be written as a script that runs immediately when executed.
No extra headings or prose after the code block.